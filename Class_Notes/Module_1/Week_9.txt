which sequence support random access to elements
vector,deque,array


specialize
    - stack 
        - last in first out

#include <iostream>
#include <stack>

int main() {
    std::stack<int> myStack;

    // Push elements onto the stack
    myStack.push(1);
    myStack.push(2);
    myStack.push(3);

    // Print the top element
    std::cout << "Top element: " << myStack.top() << std::endl;

    // Pop elements from the stack
    while (!myStack.empty()) {
        std::cout << "Popping " << myStack.top() << std::endl;
        myStack.pop();
    }

    return 0;
}


    - queue
        - first in first out

#include <iostream>
#include <queue>

int main() {
    std::queue<int> myQueue;

    // Enqueue elements
    myQueue.push(1);
    myQueue.push(2);
    myQueue.push(3);

    // Print the front element
    std::cout << "Front element: " << myQueue.front() << std::endl;

    // Dequeue elements
    while (!myQueue.empty()) {
        std::cout << "Dequeuing " << myQueue.front() << std::endl;
        myQueue.pop();
    }

    return 0;
}

    - priority_queue
        - doesnt matter who first in as long it was priority
#include <iostream>
#include <queue>

int main() {
    std::priority_queue<int> myPriorityQueue;

    // Enqueue elements
    myPriorityQueue.push(1);
    myPriorityQueue.push(3);
    myPriorityQueue.push(2);

    // Print the top element
    std::cout << "Top element: " << myPriorityQueue.top() << std::endl;

    // Dequeue elements
    while (!myPriorityQueue.empty()) {
        std::cout << "Dequeuing " << myPriorityQueue.top() << std::endl;
        myPriorityQueue.pop();
    }

    return 0;
}

    - pair

    #include <iostream>
#include <utility>

int main() {
    // Declare a pair
    std::pair<int, std::string> p;

    // Assign values to the pair
    p = std::make_pair(1, "GitHub Copilot");

    // Print the elements of the pair
    std::cout << "The pair is: (" << p.first << ", " << p.second << ")" << std::endl;

    return 0;
}

    - map
        - map is like object in javascript has key and value

#include <iostream>
#include <map>

int main() {
    // Create a map
    std::map<std::string, int> m;

    // Insert elements into the map
    m["GitHub Copilot"] = 1;
    m["AI"] = 2;
    m["Programming"] = 3;

    // Print the elements of the map
    for(const auto& pair : m) {
        std::cout << "The key is: " << pair.first << ", The value is: " << pair.second << std::endl;
    }

    return 0;
}

stricmp

#include <cstring>
#include <iostream>

int main() {
    char str1[] = "Hello";
    char str2[] = "hello";

    // Compare strings using stricmp
    int result = stricmp(str1, str2);

    if(result == 0) {
        std::cout << "The strings are equal.";
    } else {
        std::cout << "The strings are not equal.";
    }

    return 0;
}

strcasecmp


set

#include <iostream>
#include <set>

int main() {
    std::set<int> s;

    // Insert elements
    s.insert(1);
    s.insert(2);
    s.insert(2); // This will not be inserted because 2 is already in the set

    // Print elements
    for(int element : s) {
        std::cout << element << std::endl;
    }

    return 0;
}

output: 1 2


multiset

#include <iostream>
#include <set>

int main() {
    std::multiset<int> ms;

    // Insert elements
    ms.insert(1);
    ms.insert(2);
    ms.insert(2); // This will be inserted because a multiset allows duplicates

    // Print elements
    for(int element : ms) {
        std::cout << element << std::endl;
    }

    return 0;
}

output 1 2 2

tuple
    - A tuple in C++ is a single data structure that can hold elements of different types. It's a way to group together related data of different types under a single name. The std::tuple is a part of the C++ Standard Library.

#include <tuple>
#include <iostream>

int main() {
    // Create a tuple
    std::tuple<int, std::string, float> myTuple(10, "Hello", 3.14);

    // Access elements
    int myInt = std::get<0>(myTuple);
    std::string myString = std::get<1>(myTuple);
    float myFloat = std::get<2>(myTuple);

    std::cout << "Int: " << myInt << "\n";
    std::cout << "String: " << myString << "\n";
    std::cout << "Float: " << myFloat << "\n";

    return 0;
}

structure binding
    - same with the destructure

C++

#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, std::string, float> myTuple(10, "Hello", 3.14);
    auto [myInt, myString, myFloat] = myTuple;

    std::cout << "Int: " << myInt << "\n";
    std::cout << "String: " << myString << "\n";
    std::cout << "Float: " << myFloat << "\n";

    return 0;
}


VS

javascript

let myArray = [1, "Hello", 3.14];
let [myInt, myString, myFloat] = myArray;

console.log("Int: " + myInt);
console.log("String: " + myString);
console.log("Float: " + myFloat);


erase operation
    - c.erase(k) remove every elemt with key k from c return size_type

    - c.erase(p) This form is used with sequence containers like std::vector or std::list, and also with associative containers. It removes the element at position p in the container c. For sequence containers, p is an iterator pointing to the element to be removed. For associative containers, p is an iterator to the key-value pair to be removed.

    - c.erase(k,p) This form is used with sequence containers. It removes elements in the range [k, p) from the container c. Here k and p are iterators specifying the range to be removed.

#include <vector>
#include <iostream>

int main() {
    std::vector<int> myVector = {1, 2, 3, 4, 5};

    // Erase the third element
    myVector.erase(myVector.begin() + 2);

    // Print the vector
    for (int i : myVector) {
        std::cout << i << " ";
    }

    return 0;
}

map and set use support
    - Necessary to maintain proper oder in the underlying tree data structure
    - they test for eruivalent, not not equality to maintain unueness


regex
    - std::regex_match(): Determines whether a given string matches a regular expression.
    - std::regex_search(): Searches a string for a match to a regular expression and returns true if a match is found.
    - std::regex_replace(): Replaces occurrences of a pattern in a string with a specified replacement string.

#include <regex>
#include <iostream>

int main() {
    std::string text = "Hello, my phone number is 123-456-7890.";

    // Define a regular expression for a phone number
    std::regex phoneRegex("\\d{3}-\\d{3}-\\d{4}");

    // Search the text for the regular expression
    std::smatch match;
    if (std::regex_search(text, match, phoneRegex)) {
        std::cout << "Found phone number: " << match.str() << "\n";
    } else {
        std::cout << "No phone number found.\n";
    }

    return 0;
}

output: Found phone number: 123-456-7890

Regular expressions (regex) use a variety of special characters to define search patterns. Here are some of the most commonly used ones in C++:

.: Matches any single character except newline.
*: Matches zero or more occurrences of the preceding character or group.
+: Matches one or more occurrences of the preceding character or group.
?: Matches zero or one occurrence of the preceding character or group.
^: Matches the start of a line.
$: Matches the end of a line.
\\d: Matches any digit (equivalent to [0-9]).
\\D: Matches any non-digit character.
\\w: Matches any word character (equivalent to [a-zA-Z0-9_]).
\\W: Matches any non-word character.
\\s: Matches any whitespace character (spaces, tabs, line breaks).
\\S: Matches any non-whitespace character.
[]: Defines a character set, matching any character enclosed.
(): Defines a group.
|: Acts as an OR operator.
{n}: Matches exactly n occurrences of the preceding character or group.
{n,}: Matches n or more occurrences of the preceding character or group.
{n,m}: Matches between n and m occurrences of the preceding character or group.
Remember to escape these special characters with \\ if you want to match them literally in a string.