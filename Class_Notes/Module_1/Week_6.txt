throw
    - is conceptually like a function call

noexcept to a function delation
    ex:
        void f() noexcept{//your code}

- the compiler can use that information for optimazation
- but make sure it really cant emit an exception
- destructors must never throw exceptions

std::runtime_error
    - for unforeseen runtime_error
std::logic_error
    - careless programmer logic_error
declare <stdexcept> // check this

derived std::exception
    - declared in <exception>

separate operation that may fail from those that change state in you data
only change state when exceptions can no longer occur

SMART POINTER // research
    - object that emulate pointers
    - they hold the real pointers
        - but the wrapper object lives on the stack
        - its destructure calls delete on the real pointers
    - Overloaded operators
        - *
        - ->
unique_ptr
    - are not copyable
shared_ptr
    - increment their reference count when copied
    - and delete the raw pointer when count == 0

program 4
    - vector
        - compare both if v[1,2,3,4] compare v[1] == v[3] v[2] == v[4] rise and runtime_error

        template <typename T>
        void copy(T* begin, T* end, T* dest){
            while(begin!=end){
                *dest++ = *begin++;
            }
        }

Generic algorithms
    - iterator where to start and end.

Non-mutating algorithms:
for_each(b, e, do_this)
find
find_end
find_if
find_first_of
adjacent_find
count
count_if
search
mismath
equal

mutating algorithms
transform