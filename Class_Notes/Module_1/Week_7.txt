// include the algorithm library
#include <algorithm>

// sort a range of elements
std::sort(first, last);

// find an element in a range
std::find(first, last, value);

// count the number of occurrences of an element in a range
std::count(first, last, value);

// copy a range of elements to another range
std::copy(first, last, result);

// remove elements from a range that satisfy a condition
std::remove_if(first, last, condition);

// transform a range of elements using a function
std::transform(first, last, result, function);

// generate a range of elements using a function
std::generate(first, last, function);

// shuffle a range of elements
std::shuffle(first, last, generator);

// merge two sorted ranges into a single sorted range
std::merge(first1, last1, first2, last2, result);

// compute the union of two sorted ranges
std::set_union(first1, last1, first2, last2, result);

// compute the intersection of two sorted ranges
std::set_intersection(first1, last1, first2, last2, result);

// compute the difference of two sorted ranges
std::set_difference(first1, last1, first2, last2, result);

// compute the symmetric difference of two sorted ranges
std::set_symmetric_difference(first1, last1, first2, last2, result);


In C++, transform is a function that applies a given operation to each element of a range and stores the result in another range. It takes three input ranges: the first range is the source range, the second range is the destination range, and the third range is the range of the operation to be applied. The operation can be a function or a lambda expression.

Here's an example of using transform to square each element of a vector and store the result in another vector:

#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> v1{1, 2, 3, 4, 5};
    std::vector<int> v2(v1.size());

    std::transform(v1.begin(), v1.end(), v2.begin(), [](int x) { return x * x; });

    for (auto i : v2) {
        std::cout << i << " ";
    }
    std::cout << std::endl;

    return 0;
}

output: 1 4 9 16 25

accumalte(beg, end, init)
accumalte(beg, end, init, bin_function)
inner_product
partial_sum
adjacent

predicate function is a bool function

overloading operator()
    - In C++, operator() is the function call operator. It is used to define a class or struct that can be called like a function. This is known as a function object or a functor.
Overloading the operator() allows you to define the behavior of the function object when it is called. This can be useful in situations where you want to encapsulate some behavior in a class or struct and make it callable like a function.

Here's an example of overloading the operator() to define a function object that adds two numbers:

struct Adder {
    int operator()(int a, int b) {
        return a + b;
    }
};

int main() {
    Adder add;
    int result = add(1, 2);
    std::cout << result << std::endl; // prints "3"
    return 0;
}

In this example, the Adder struct overloads the operator() to define a function object that adds two numbers. The operator() takes two integer arguments and returns their sum.

The Adder struct can then be instantiated like a regular object and called like a function. In the main function, an instance of Adder is created and called with the arguments 1 and 2, which returns 3.

differecne between struct and class
    - By default, the member variables and member functions in a struct are public, while the member variables and member functions in a class are private. This means that in a struct, all member variables and member functions can be accessed from outside the struct, while in a class, they cannot.

template <typename T>
    struct equalTo{
    T operator()(par1,par2){
        return // do something
        }   
    }

lambda
    - annoymous function
    - can be assined to a variables- can access urrounding variables
    - can be return from a function
    - Syttax
        - [<capture directive>](<args>){return <exp>}
        - [<capture directive>](<args>)->type{<body>}
    
    CAPTURING

    - In C++, capturing is a feature of lambda expressions that allows them to access variables from the    enclosing scope. When a lambda expression captures a variable, it creates a copy of that variable and stores it within the lambda object. The captured variable can then be used within the lambda expression as if it were a local variable.
There are two ways to capture variables in C++ lambda expressions: by value and by reference. When a variable is captured by value, a copy of the variable is made and stored within the lambda object. When a variable is captured by reference, a reference to the variable is stored within the lambda object, allowing the lambda expression to modify the original variable.

Here's an example of capturing a variable by value in a lambda expression:

int x = 42;
auto lambda = [x]() {
    std::cout << "x = " << x << std::endl;
};
lambda(); // prints "x = 42"

int x = 42;
auto lambda = [&x]() {
    x = 43;
    std::cout << "x = " << x << std::endl;
};
lambda(); // prints "x = 43"
std::cout << "x = " << x << std::endl; // prints "x = 43"

iterator taxonomy

    - Input iterators: These iterators provide read-only access to a sequence of values, and they can be used to read each value in the sequence exactly once. Input iterators support the ++ operator to move to the next element, and the * operator to dereference the iterator and access the current element.
    - Output iterators: These iterators provide write-only access to a sequence of values, and they can be used to write each value in the sequence exactly once. Output iterators support the ++ operator to move to the next element, and the * operator to write a value to the current element.
    - Forward iterators: These iterators provide read-write access to a sequence of values, and they can be used to read or write each value in the sequence exactly once. Forward iterators support the same operations as input and output iterators, as well as the ability to compare two iterators for equality or inequality.
    - Bidirectional iterators: These iterators provide read-write access to a sequence of values, and they can be used to read or write each value in the sequence in any order. Bidirectional iterators support the same operations as forward iterators, as well as the ability to move to the previous element using the -- operator.
    - Random access iterators: These iterators provide read-write access to a sequence of values, and they can be used to read or write each value in the sequence in any order. Random access iterators support the same operations as bidirectional iterators, as well as the ability to perform arithmetic operations such as + and - to move the iterator to a specific position in the sequence, and the ability to access any element in the sequence directly using the [] operator.

    GitHub Copilot: Here's an example of a function that reads input from a stream and separates words by whitespace:

```cpp
#include <iostream>
#include <string>

void readWords(std::istream& input) {
    std::string word;
    while (input >> word) {
        std::cout << "Word: " << word << std::endl;
    }
    if (input.eof()) {
        std::cout << "End of file reached." << std::endl;
    } else if (input.fail()) {
        std::cout << "Input failed." << std::endl;
    } else {
        std::cout << "Unknown error." << std::endl;
    }
}
```

In this example, we define a function called `readWords` that takes an input stream as an argument. We then define a string variable `word` to hold each word that we read from the stream.

We use a `while` loop to read words from the stream using the `>>` operator, which separates words by whitespace. For each word that we read, we print it to the console using `std::cout`.

After the loop, we check if the end of the file has been reached using the `eof()` function, or if the input failed using the `fail()` function. If neither of these conditions is true, we print an "unknown error" message to the console.

Note that this function will read words from the input stream until the end of the file is reached, or until an error occurs. If you want to read a specific number of words from the input stream, you can modify the function to include a counter variable and a condition to check the number of words that have been read.