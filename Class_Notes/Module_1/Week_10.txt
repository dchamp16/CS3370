bitstring
    - In C++, you can represent a bit string using the std::bitset class from the <bitset> library. A std::bitset is a sequence of bits. You can manipulate its individual bits just like an array.

#include <cstring>

class String {
    int size;
    char* data;

public:
    // Constructor
    String(const char* input) {
        size = strlen(input);
        data = new char[size + 1];
        strcpy(data, input);
    }
    // Copy constructor
    String(const String& s) {
        size = s.size;
        data = new char[size + 1];
        strcpy(data, s.data);
    }
    // Destructor
    ~String() {
        delete[] data;
    }
};

effiecieny in C++ function
    - we often create a referrence
very often copies are temporaries
    - they have no name
    - they exist a very short
threre are times when we can acoid a full copu of a temporary by stealing its resources
    - we actually do a shallow coyp/assign
    - the temporary wont need to keep those resources anyways
we need to discren between a temporaru and an object that persists beyond the current expression

rvalue referrence
    - only bind to temporaries
uses the && syntax
    - T::T(T&& t){...}
        - T::T(T&& t) {...}: This is the move constructor. It's used to create a new object from a temporary object (an rvalue) of the same type. The && denotes an rvalue reference. The move constructor "steals" the resources from the temporary object, instead of making a costly copy, and leaves the temporary object in a valid but unspecified state.
    - T& operator=(T&& t){...}
        - T& operator=(T&& t) {...}: This is the move assignment operator. It's used to efficiently transfer resources from a temporary object to an existing object. Like the move constructor, it "steals" the resources and leaves the temporary object in a valid but unspecified state.

They are used to efficiently handle resources when an object is a temporary or about to be discarded.

- we now cal regular references lvalue references
- rvalue reference only represent object soon to be destroyed
    - temporary, nameless values
    - there references are unique
- variables are lvalues in their scioe
    - even if they were declared with &&

lvalue: An lvalue (locator value) represents an object that occupies some identifiable location in memory (i.e., has an address). lvalues can appear on either the left-hand or the right-hand side of an assignment operator. The 'l' in lvalue stands for 'left'.

rvalue: An rvalue (read value) is an expression that does not represent an object occupying some identifiable location in memory. rvalues are typically temporary objects or values, and can only appear on the right-hand side of an assignment operator. The 'r' in rvalue stands for 'right'.

mechanic move constructor
    - primitive jsut copy them
    - pointers just copu the pointers
    - objects including library object std::move()
    - use the initializer list to initalize the members
importatn the r value object must be in a destructible state

Operator Overloading
- The active selection, "Operator Overloading," refers to a feature in C++ programming that allows programmers to redefine the way operators work with user-defined types (classes). This is done by implementing a special kind of function called an operator function.

When you create a class in C++, you can define what an operator like +, -, ==, or != does when used with objects of your class. This is called operator overloading. For example, if you have a Vector class representing a mathematical vector, you can overload the + operator to provide vector addition.

Operator overloading can make your code more intuitive and easier to read, because it allows user-defined types to behave like built-in types when operated upon. However, it should be used wisely, as it can also make code more complex and harder to understand if used improperly. The behavior of overloaded operators should be intuitive and consistent with how the operators work with built-in types.

- complex number
    - a number that can be expressed in the form a + bi, where a and b are real numbers, and i is a solution of the equation x^2 = -1. In this expression, a is the real part and b is the imaginary part of the complex number.

#include <iostream>
#include <complex>

int main() {
    std::complex<double> num1(2.0, 3.0);  // 2 + 3i
    std::complex<double> num2(1.5, 2.5);  // 1.5 + 2.5i

    std::complex<double> sum = num1 + num2;

    std::cout << "The sum of " << num1 << " and " << num2 << " is " << sum << "\n";

    return 0;
}
output: The sum of (2,3) and (1.5,2.5) is (3.5,5.5)

In this example, we create two complex numbers num1 and num2 using the std::complex class from the <complex> library. We then add these numbers together and print the result.

